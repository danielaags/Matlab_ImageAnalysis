clear
%Read the files
images = dir('*.tif');
fnames = dir('*_d*');
fnames30 = dir('d30*');
path = pwd;

%Get the number of files, all the times points except t=30
numfids = length(fnames);
%numfids = 1;
delimiter = ',';
startRow = 2;
formatSpec = '%s%f%f%f%f%[^\n\r]';

%%
%Read file day=30. File only needs to be read once.
filename30 = strcat(path, '\', fnames30.name);
%Open the file.
fileID = fopen(filename30,'r');
dataArray30 = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
fclose(fileID);
%Extract information
names30 = dataArray30{1};
centers30= [dataArray30{2}, dataArray30{3}];
radii30 = dataArray30{4};

%Cell data type to save different radii. One line longer to perform
%operations that will remove zeros at the last time point
Radii = cell(7,1);

%Find the radii across every single data point
for k = 1:5
%k
%Files t=25, t=20, t=15, t=10, t=5
filename = strcat(path, '\', fnames(k).name);
%Open the file.
fileID = fopen(filename,'r');
%Extract the information
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
fclose(fileID);
%Extract information
names = dataArray{1};
centers = [dataArray{2}, dataArray{3}];
radii = dataArray{4};

%Check how many were identify in last day, useful to add new rows to our
%data frames
extra_rows = abs(length(names30) - length(names30));
%extra_rows = 0;

%New empty vectors to save the re-ordered data
names_update = string(1:length(names30)+extra_rows);
y = zeros(length(names30)+extra_rows,1);
x = zeros(length(names30)+extra_rows,1);
r = zeros(length(names30)+extra_rows,1);
r30 = zeros(length(names30)+extra_rows,1);

%find in which index of t<30 the colony labaled in t=30 is. This will
%allows us to extract the growth rate of each colony
id = ones(length(names30),1);
%add = 1;
%id_y = zeros(length(namesN),1);
%id_x = zeros(length(namesN),1);
for i = 1:length(names30)
    %Checks if the y element in t=30 is in t<30. It does not check for a
    %specific number but for an array of values. There is a problem with
    %colonies moving around a couple of pixels.
    idy = find(centers30(i,1)-5 <= centers(:,1) & centers30(i,1)+5 >= centers(:,1),1);
    if isempty(idy)
        %Checks if the x element in t=30 is in t<30.
        idx = find(centers30(i,2)-5 <= centers(:,2) & centers30(i,2)+5 >= centers(:,2),1);
        if isempty(idx)
            %If not in t<30 there is no radii info to use
            names_update(i) = names30(i);
            y(i) = centers30(i,1);
            x(i) = centers30(i,2);
            r(i) = 0;
            r30(i) = radii30(i);
            %No colony in time<30
            id(i) = false;
        else
            %If only found when searching in x, take that index to match
            %the radius
            names_update(i) = names30(i);
            y(i) = centers30(i,1);
            x(i) = centers30(i,2);
            r(i) = radii(idx);
            r30(i) = radii30(i);
            id(i) = idx;
        end
    else
        %If found when searching in y, take that index to match
        %the radius
        names_update(i) = names30(i);
        y(i) = centers30(i,1);
        x(i) = centers30(i,2);
        r(i) = radii(idy);
        r30(i) = radii30(i);
        id(i) = idy;
    end
%The search won't look for colonies identified in previous times. Need to be updated.    
end


%Take data and replace the data from last day with the updated date collected from dataN and
%dataM
names30 = names_update;
centers30= [y, x];
radii30 = r30;
Radii{k+1} = r; 
end
Radii{1} = radii30;
Radii{7} = zeros(length(radii30),1);

%Remove 0 in between data points taking the average between point i-1 and
%i+1
for i = 2:6
%     rows1 = length(names)-length(Radii{i});
%     rows2 = length(names)-length(Radii{i+1});
%     Radii{i} = [Radii{i};zeros(rows1,1)];
%     Radii{i+1} = [Radii{i+1};zeros(rows2,1)];
    idx = Radii{i} == 0;
    Radii{i}(idx) = (Radii{i-1}(idx) + Radii{i+1}(idx))/2;  
end

%Calculate the growth rate
%%k = n/t%%
k = (log10(Radii{1})-log10(Radii{2}))/0.301*5;


%Collect data in a table, better visualization. COnsidered other data types
file_name = split(fnames30.name, '.');
save(strcat(file_name{1},'-radii.mat'), 'Radii');

g = struct('Label', names30', 'y', y, 'x', x, 'growth', k);
save(strcat(file_name{1},'-data.mat'), 'g');

%%
%Get the pixel information for each plate with the coordanates and radii
%obtained in the previous section
for i = 1:6
    %Read the images, one by one.
        file= images(i).name;
        filename = split(file, '.');
        I = imread(file, 'tif');
        %Read each channel (RGB) separately
    for j = 1:3
        rgbI = I(:,:,j);
        %Create BW canvas
        imageSize = size(rgbI);
        BW = false(imageSize);

        imshow(rgbI);
        hold on
        for k = 1:length(names)
            %Since some values for the radius might be 0 and this could
            %crash the loop, it's better to include an if statement to only
            %check for colonies with a radius > 0
            if Radii{i}(k) > 0
                h = drawcircle(gca,'Center',centers30(k,:),'Radius',(Radii{i}(k)));
                mask = h.createMask();
                BW = BW | mask;
            end
        end
        hold off
        close

        % figure
        % imshow(BW)

        %Save according to RGB channel
        if j == 1
            %Better to have a different name for the different structures
            statsPixel_red = regionprops(BW,rgbI,{'Centroid','PixelValues', 'MaxIntensity', 'MinIntensity', 'MeanIntensity'});
            save(strcat(filename{1},'-pixel_red.mat'), 'statsPixel_red');
        elseif j == 2
            %Better to have a different name for the different structures
            statsPixel_green = regionprops(BW,rgbI,{'Centroid','PixelValues', 'MaxIntensity', 'MinIntensity', 'MeanIntensity'});
            save(strcat(filename{1},'-pixel_green.mat'), 'statsPixel_green');
        else
            %Better to have a different name for the different structures
            statsPixel_blue = regionprops(BW,rgbI,{'Centroid','PixelValues', 'MaxIntensity', 'MinIntensity', 'MeanIntensity'});
            save(strcat(filename{1},'-pixel_blue.mat'), 'statsPixel_blue');
        end
        
        
    end
end

close all
clear all
